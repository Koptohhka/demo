{"version":3,"sources":["constants/pieces.ts","constants/indexes.ts","dnd/utils/getTargetElementUnderLayer.ts","dnd/useDndProvider.tsx","components/Figure/index.ts","components/Figure/Figure.tsx","components/Cell/index.ts","components/Cell/Cell.tsx","defaultFigureIcons/KingWhite.svg","defaultFigureIcons/QueenWhite.svg","defaultFigureIcons/RookWhite.svg","defaultFigureIcons/BishopWhite.svg","defaultFigureIcons/KnightWhite.svg","defaultFigureIcons/PawnWhite.svg","defaultFigureIcons/PawnBlack.svg","defaultFigureIcons/KingBlack.svg","defaultFigureIcons/QueenBlack.svg","defaultFigureIcons/RookBlack.svg","defaultFigureIcons/BishopBlack.svg","defaultFigureIcons/KnightBlack.svg","redux/chessboardReducer.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["pieces","indexes","getTargetElementUnderLayer","x","y","elementFlag","currentElement","stack","elementStylesChaching","recurFind","document","elementFromPoint","dataset","tagName","length","forEach","it","i","style","display","push","DndProvier","children","onDrop","figuresData","useSelector","state","chessboardReducer","useDispatch","useState","translateValue","setTranslateValue","currentTarget","setCurrentTarget","isDraging","setisDraging","startX","startY","currentX","currentY","coordsMap","setCoordsMap","getCurrentTraslateValue","evtTarget","transformValue","getComputedStyle","getPropertyValue","split","slice","Number","onMouseDown","evt","target","figure","clientX","clientY","nextTrValue","transform","onMouseMove","testX","testY","console","log","undefined","onMouseUp","cell","source","className","onTouchStart","nextTranslateValue","changedTouches","onTouchMove","onTouchEnd","Figure","index","size","imagePath","dragRef","useRef","ref","id","background","backgroundSize","top","left","width","height","position","zIndex","touchAction","Cell","squareStyle","SET_FUGRES_DATA","initialState","action","type","payload","DEFAULT_IMAGE_PATHS","KingWhite","WhiteQueen","WhitRock","WhiteBishop","WhiteKnight","WhitePawn","KingBlack","BlackQueen","BlackRock","BlackBishop","BlackKnight","PawnBlack","App","imagePaths","fen","lightSquareStyle","backgroundColor","blackSquareStyle","test","dispatch","currentFen","createChessboardCoordsMap","boardArrangement","chessboardCoords","j","String","fromCharCode","image","useEffect","border","gridTemplateColumns","cells","isWhite","renderCells","figures","chessCoords","Object","entries","key","value","renderFigures","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.77603244.chunk.js","sourcesContent":["const pieces: any = {\r\n    \"wS\": true,\r\n    \"bS\":true,\r\n    \"K\": true,\r\n    \"Q\": true,\r\n    \"R\": true,\r\n    \"B\":true,\r\n    \"N\":true,\r\n    \"P\":true,\r\n    \"k\": true,\r\n    \"q\": true,\r\n    \"r\": true,\r\n    \"b\": true,\r\n    \"n\": true,\r\n    \"p\": true,\r\n}\r\n\r\nexport { pieces };","const indexes = [\"A1\",\"A2\",\"A3\",\"A4\",\"A5\",\"A6\",\"A7\",\"A8\",\"B1\",\"B2\",\"B3\",\"B4\",\"B5\",\"B6\",\"B7\",\"B8\",\"C1\",\"C2\",\"C3\",\"C4\",\"C5\",\"C6\",\"C7\",\"C8\",\"D1\",\"D2\",\"D3\",\"D4\",\"D5\",\"D6\",\"D7\",\"D8\",\"E1\",\"E2\",\"E3\",\"E4\",\"E5\",\"E6\",\"E7\",\"E8\",\"F1\",\"F2\",\"F3\",\"F4\",\"F5\",\"F6\",\"F7\",\"F8\",\"G1\",\"G2\",\"G3\",\"G4\",\"G5\",\"G6\",\"G7\",\"G8\",\"H1\",\"H2\",\"H3\",\"H4\",\"H5\",\"H6\",\"H7\",\"H8\"]\r\n\r\nexport {indexes};","export const getTargetElementUnderLayer = (x: any, y: any, elementFlag: any) => {\r\n    let currentElement: any = null;\r\n\r\n    const stack: any = [];\r\n    const elementStylesChaching: any = [];\r\n\r\n    const recurFind = (): any => {\r\n        currentElement = document.elementFromPoint(x, y);\r\n\r\n        if (currentElement) {\r\n            if (currentElement.dataset[elementFlag] || currentElement.tagName === 'HTML') {\r\n                if (stack.length !== 0) {\r\n                    stack.forEach((it: any, i: number) => it.style.display = elementStylesChaching[i])\r\n                }\r\n                return currentElement;\r\n            } else {\r\n                elementStylesChaching.push(currentElement.style.display);\r\n                currentElement.style.display = 'none';\r\n                stack.push(currentElement);\r\n                return recurFind();\r\n            }\r\n        }\r\n    }\r\n\r\n    return recurFind();\r\n}","import React, { useContext, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { chessboardContext } from '../context/chessboardContext';\r\nimport { DndContextProvider, dndContext } from './dndContext';\r\n\r\nimport { setFiguresData } from '../redux/chessboardReducer';\r\nimport { getTargetElementUnderLayer } from '../dnd/utils/getTargetElementUnderLayer';\r\n\r\nconst DndProvier = ({ children, onDrop }: any) => {\r\n    const { figuresData } = useSelector((state: any) => state.chessboardReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    //\r\n    const [test, setTest]: any = useState(null);\r\n    //\r\n\r\n    const [translateValue, setTranslateValue]: any = useState({\r\n        x: null,\r\n        y: null\r\n    });\r\n    const [currentCell, setCurrentCell]: any = useState(null);\r\n    const [currentTarget, setCurrentTarget]: any = useState(null);\r\n    const [isDraging, setisDraging] = useState(false);\r\n    const [coordsMap, setCoordsMap]: any = useState({\r\n        startX: null,\r\n        startY: null,\r\n        currentX: null,\r\n        currentY: null\r\n    });\r\n\r\n    const getCurrentTraslateValue = (evtTarget: any) => {\r\n        const transformValue = getComputedStyle(evtTarget).getPropertyValue('transform').split(', ');\r\n\r\n        let y: any = transformValue[transformValue.length - 1];\r\n        y = y.slice(0, y.length - 1);\r\n        const x = transformValue[transformValue.length - 2];\r\n        return {\r\n            x: Number(x),\r\n            y: Number(y)\r\n        }\r\n    }\r\n\r\n    const onTouchhandler = (evt: any) => {\r\n        const nextTranslateValue = getCurrentTraslateValue(evt.target);\r\n        setTranslateValue(nextTranslateValue);\r\n\r\n        const { target, changedTouches } = evt;\r\n        if (figuresData[target.dataset.figure]) {\r\n            const { clientX, clientY } = changedTouches[0];\r\n            setisDraging(true);\r\n            setCurrentTarget(target);\r\n\r\n            setCoordsMap({\r\n                ...coordsMap,\r\n                startX: clientX,\r\n                startY: clientY\r\n            });\r\n\r\n            evt.target.style.transform = `translate(${clientX - 50}px, ${clientY - 50}px)`\r\n        }\r\n    }\r\n\r\n    const onTouchMoveHandler = (evt: any) => {\r\n        console.log(evt);\r\n        // console.log(evt.changedTouches[0].clientX);\r\n        // console.log(evt.changedTouches[0].clientY);\r\n        const { clientY, clientX } = evt.changedTouches[0];\r\n\r\n        let newX = translateValue.x;\r\n        let newY = translateValue.y;\r\n\r\n        newX = clientX;\r\n        newY = clientY;\r\n\r\n        currentTarget.style.transform = `translate(${clientX - 50}px, ${clientY - 50}px)`\r\n    }\r\n\r\n    const onTouchEndHandler = (evt: any) => {\r\n        setisDraging(false);\r\n\r\n        evt.target.style.transform = '';\r\n\r\n        const { clientY, clientX } = evt.changedTouches[0];\r\n        const cell = getTargetElementUnderLayer(clientX, clientY, 'cell');\r\n        console.log(cell)\r\n        if (onDrop({\r\n            source: currentTarget.dataset.figure,\r\n            target: cell.dataset.cell\r\n        })) {\r\n\r\n            console.log(currentTarget)\r\n            currentTarget.className = `figure figure-${cell.dataset.cell}`;\r\n\r\n            console.log(evt)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n\r\n            onMouseDown={(evt: any) => {\r\n                if (figuresData[evt.target.dataset.figure]) {\r\n                    const { clientX, clientY } = evt;\r\n                    setisDraging(true);\r\n                    setCurrentTarget(evt.target);\r\n                    //\r\n                    const nextTrValue = getCurrentTraslateValue(evt.target);\r\n\r\n                    setTranslateValue(nextTrValue);\r\n                    ///\r\n                    setCoordsMap({\r\n                        ...coordsMap,\r\n                        startX: clientX,\r\n                        startY: clientY\r\n                    });\r\n                    evt.target.style.transform = `translate(${clientX - 50}px, ${clientY - 50}px)`\r\n                }\r\n            }}\r\n\r\n            onMouseMove={isDraging ? (evt: any) => {\r\n                const { clientX, clientY } = evt;\r\n\r\n                // тут логика изменения цвета при наведении\r\n                // const cell = getTargetElementUnderLayer(clientX, clientY, 'cell');\r\n                // if (currentCell === cell) {\r\n                //     console.log(true);\r\n                //     // cell.style.boxShadow = '-5px -5px 0px red';\r\n                //     cell.style.outline = '2px solid red';\r\n                //     cell.style.zIndex = '99';\r\n                // } else {\r\n                //     console.log(false)\r\n                //     if (currentCell) {\r\n                //         currentCell.style.outline = 'none';\r\n                //         cell.style.zIndex = '1';\r\n                //     }\r\n                //     setCurrentCell(cell);\r\n                // }\r\n                // тут логика изменения цвета при наведении\r\n                let newX = translateValue.x;\r\n                let newY = translateValue.y;\r\n\r\n                // newX = clientX;\r\n                // newY = clientY;\r\n\r\n                // \r\n                let testX = newX;\r\n                let testY = newY\r\n                testX -= (translateValue.x - clientX)\r\n                testY -= (translateValue.y - clientY)\r\n                console.log( `translate(${testX}px, ${testY}px)`)\r\n                //console.log(translateValue.x, translateValue.y)\r\n\r\n                //\r\n                console.log(clientX, clientY);\r\n                currentTarget.style.transform = `translate(${clientX - 50}px, ${clientY - 50}px)`\r\n            } : undefined}\r\n\r\n            onMouseUp={isDraging ? (evt: any) => {\r\n                setisDraging(false);\r\n                evt.target.style.transform = '';\r\n\r\n                const { clientX, clientY } = evt;\r\n                const cell = getTargetElementUnderLayer(clientX, clientY, 'cell');\r\n                console.log(cell)\r\n                if (onDrop({\r\n                    source: currentTarget.dataset.figure,\r\n                    target: cell.dataset.cell\r\n                })) {\r\n\r\n                    console.log(currentTarget)\r\n                    currentTarget.className = `figure figure-${cell.dataset.cell}`;\r\n\r\n                    console.log(evt)\r\n                }\r\n\r\n                currentTarget.style.transform = '';\r\n            } : undefined}\r\n\r\n\r\n\r\n            /////// TOUCH_EVENTS\r\n            onTouchStart={onTouchhandler}\r\n\r\n            onTouchMove={isDraging ? onTouchMoveHandler : undefined}\r\n\r\n            onTouchEnd={isDraging ? onTouchEndHandler : undefined}\r\n\r\n        >\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { DndProvier };","import Figure from './Figure';\r\nexport default Figure;","import React, { useState, useCallback, useContext, useEffect, useRef } from 'react';\r\nimport './Figure.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { chessboardContext } from '../../context/chessboardContext';\r\nimport { useDrag } from '../../dnd/useDrag';\r\nimport { getTargetElementUnderLayer } from '../../dnd/utils/getTargetElementUnderLayer';\r\nimport { dndContext } from '../../dnd/dndContext';\r\nimport { Transition } from 'react-transition-group';\r\n\r\nimport { setFiguresData } from '../../redux/chessboardReducer';\r\n\r\nconst Figure = ({ index, size, children, imagePath }: any) => {\r\n    const { figuresData } = useSelector((state: any) => state.chessboardReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    const dragRef: any = useRef(null);\r\n\r\n\r\n    return (\r\n        <div\r\n            className={`figure figure-${index}`}\r\n            ref={dragRef}\r\n            {...{ 'data-figure': `${index}` }}\r\n            id={`figure-${index}`}\r\n            style={{\r\n                background: `url(${imagePath}) no-repeat`,\r\n                backgroundSize: '90% 90%',\r\n                top: 0,\r\n                left: 0,\r\n                width: size,\r\n                height: size,\r\n                position: 'absolute',\r\n                zIndex: 100,\r\n                touchAction: 'none',\r\n                // transition: '0.3s all'\r\n                // transform: `translate(${X}px, ${Y}px)`\r\n            }}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Figure;","import Cell from './Cell';\r\nexport default Cell;","import React, { useState } from 'react';\r\n\r\ninterface Props {\r\n    size: number | string;\r\n    onMouseDown: any;\r\n    Figure?: any;\r\n}\r\n\r\nconst Cell = ({ size, index, children, squareStyle }: any) => {\r\n\r\n    return(\r\n        <div\r\n        {...{ 'data-cell': `${index}` }}\r\n        style={{\r\n            width: size,\r\n            height: size,\r\n            ...squareStyle\r\n        }}\r\n        >\r\n           {children} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cell;","export default __webpack_public_path__ + \"static/media/KingWhite.411e1418.svg\";","export default __webpack_public_path__ + \"static/media/QueenWhite.337c2a2c.svg\";","export default __webpack_public_path__ + \"static/media/RookWhite.60061bbb.svg\";","export default __webpack_public_path__ + \"static/media/BishopWhite.f416d383.svg\";","export default __webpack_public_path__ + \"static/media/KnightWhite.66169663.svg\";","export default __webpack_public_path__ + \"static/media/PawnWhite.b7bd895a.svg\";","export default __webpack_public_path__ + \"static/media/PawnBlack.b0577cbe.svg\";","export default __webpack_public_path__ + \"static/media/KingBlack.3bb79907.svg\";","export default __webpack_public_path__ + \"static/media/QueenBlack.ad9b7855.svg\";","export default __webpack_public_path__ + \"static/media/RookBlack.aed24261.svg\";","export default __webpack_public_path__ + \"static/media/BishopBlack.376719d4.svg\";","export default __webpack_public_path__ + \"static/media/KnightBlack.344f8f65.svg\";","const SET_FUGRES_DATA = 'chessboardReducer/SET_FUGRES_DATA';\r\n\r\nconst initialState = {\r\n    figuresData: null,\r\n}\r\n\r\nconst chessboardReducer = (state: any = initialState, action: any) => {\r\n    switch(action.type) {\r\n        case SET_FUGRES_DATA:\r\n            return {\r\n                ...state,\r\n                figuresData: action.payload\r\n            } \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst setFiguresData = (payload: any) => ({\r\n    type: SET_FUGRES_DATA,\r\n    payload\r\n})\r\n\r\nexport default chessboardReducer;\r\nexport { setFiguresData };","import React, { useCallback, useState, useContext, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './App.scss';\r\nimport { pieces } from './constants/pieces';\r\nimport { indexes } from './constants/indexes';\r\nimport { ChessboardProvider, chessboardContext } from './context/chessboardContext';\r\nimport { DndProvier } from './dnd/useDndProvider';\r\n\r\nimport Figure from './components/Figure';\r\nimport Cell from './components/Cell';\r\nimport Row from './components/Row';\r\n\r\nimport PawnWhite from './defaultFigureIcons/PawnWhite.svg';\r\nimport KingWhite from './defaultFigureIcons/KingWhite.svg';\r\nimport WhiteQueen from './defaultFigureIcons/QueenWhite.svg';\r\nimport WhitRock from './defaultFigureIcons/RookWhite.svg';\r\nimport WhiteBishop from './defaultFigureIcons/BishopWhite.svg';\r\nimport WhiteKnight from './defaultFigureIcons/KnightWhite.svg';\r\nimport WhitePawn from './defaultFigureIcons/PawnWhite.svg';\r\nimport PawnBlack from './defaultFigureIcons/PawnBlack.svg';\r\nimport KingBlack from './defaultFigureIcons/KingBlack.svg';\r\nimport BlackQueen from './defaultFigureIcons/QueenBlack.svg';\r\nimport BlackRock from './defaultFigureIcons/RookBlack.svg';\r\nimport BlackBishop from './defaultFigureIcons/BishopBlack.svg';\r\nimport BlackKnight from './defaultFigureIcons/KnightBlack.svg';\r\nimport BlackPawn from './defaultFigureIcons/PawnWBlack.svg';\r\n\r\n\r\nimport { setFiguresData } from './redux/chessboardReducer';\r\n\r\ninterface Props {\r\n  size?: number;\r\n  fen?: string;\r\n}\r\n\r\nconst DEFAULT_FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\r\nconst DEFAULT_BOARD_SIZE = 600;\r\nconst DEFAULT_IMAGE_PATHS = {\r\n  \"K\": KingWhite,\r\n  \"Q\": WhiteQueen,\r\n  \"R\": WhitRock,\r\n  \"B\": WhiteBishop,\r\n  \"N\": WhiteKnight,\r\n  \"P\": WhitePawn,\r\n  \"k\": KingBlack,\r\n  \"q\": BlackQueen,\r\n  \"r\": BlackRock,\r\n  \"b\": BlackBishop,\r\n  \"n\": BlackKnight,\r\n  \"p\": PawnBlack,\r\n};\r\n\r\nconst App = (\r\n  { \r\n    imagePaths = DEFAULT_IMAGE_PATHS,\r\n    size = DEFAULT_BOARD_SIZE,\r\n    fen = DEFAULT_FEN,\r\n    lightSquareStyle = { backgroundColor: 'white' },\r\n    blackSquareStyle = { backgroundColor: 'black' },\r\n    onDrop = (test: any) => {\r\n      console.log(test)\r\n      return true;\r\n    }\r\n  }: any\r\n) => {\r\n  const { figuresData } = useSelector((state: any) => state.chessboardReducer);\r\n  const dispatch = useDispatch();\r\n\r\n  const [currentFen, setCurrentFen] = useState<string>(fen);\r\n\r\n  const createChessboardCoordsMap = (fen: string) => {\r\n    const splitedFenString = fen.split(' ');\r\n    const boardArrangement = splitedFenString[0].split('/');\r\n\r\n    const chessboardCoords: any = {};\r\n\r\n    for (let i = 0; i < 8; i += 1) {\r\n\r\n      for (let j = 0; j < 8; j += 1) {\r\n        if (pieces[boardArrangement[i][j]]) {\r\n          chessboardCoords[`${String.fromCharCode(65 + i)}${j + 1}`] = {\r\n            image: imagePaths[boardArrangement[i][j]]\r\n          };\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    console.log(chessboardCoords)\r\n    return chessboardCoords;\r\n  }\r\n\r\n  const renderCells = () => {\r\n    const cells = [];\r\n\r\n    let isWhite = false;\r\n\r\n    for (let i = 0; i < 64; i += 1) {\r\n\r\n      if (i % 8 !== 0) {\r\n        isWhite = !isWhite;\r\n      }\r\n\r\n      cells.push(\r\n        <Cell index={indexes[i]} squareStyle={isWhite ? lightSquareStyle : blackSquareStyle} />\r\n      );\r\n    }\r\n\r\n    return cells;\r\n  }\r\n\r\n  const renderFigures = () => {\r\n    const figures = [];\r\n    const chessCoords = Object.entries(figuresData);\r\n    for (let i = 0; i < chessCoords.length; i += 1) {\r\n      const [key, value]: any = chessCoords[i];\r\n      figures.push(<Figure imagePath={value.image} index={key} size={size / 8}>\r\n      </Figure>);\r\n    }\r\n\r\n    return figures;\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log(createChessboardCoordsMap(currentFen))\r\n    if (!figuresData) dispatch(setFiguresData(createChessboardCoordsMap(currentFen)));\r\n    else {\r\n      //\r\n\r\n    }\r\n\r\n  }, [currentFen]);\r\n\r\n  useEffect(() => {\r\n    // if (!figuresData) {\r\n\r\n    //   setTimeout(() => setCurrentFen('rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1'), 3000)\r\n\r\n    //   setTimeout(() => setCurrentFen('rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 2'), 5000)\r\n\r\n    //   setTimeout(() => setCurrentFen('rnbqkbnr/pp1ppppp/8/2p5/4P3/5N2/PPPP1PPP/RNBQKB1R b KQkq - 1 2'), 8000)\r\n    // }\r\n  }, []);\r\n\r\n  return (\r\n    <DndProvier onDrop={onDrop}>\r\n      <div style={{\r\n        width: size,\r\n        height: size,\r\n        border: '1px solid black',\r\n        display: 'grid',\r\n        gridTemplateColumns: `${size / 8}px ${size / 8}px ${size / 8}px ${size / 8}px ${size / 8}px ${size / 8}px ${size / 8}px ${size / 8}px`\r\n      }}\r\n        className=\"Chessboard\">\r\n        {renderCells()}\r\n        {figuresData ? (\r\n          <>\r\n            {/* {renderBoard()} */}\r\n            {renderFigures()}\r\n          </>\r\n        ) : null}\r\n      </div>\r\n      {/* <button style={{ width: 100, height: 100 }} onClick={() => {\r\n        //\r\n        dispatch(setTestNum(state.testNum + 1));\r\n        //\r\n        console.log(state)\r\n      }}></button> */}\r\n    </DndProvier>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { combineReducers, createStore } from 'redux';\r\nimport chessboardReducer from './chessboardReducer';\r\n\r\nconst rootReducer: any = combineReducers({\r\n    chessboardReducer\r\n});\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport { store };\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\n\nimport { store } from './redux/store';\nimport { ChessboardProvider } from './context/chessboardContext';\nimport { DndContextProvider } from './dnd/dndContext';\n// import { DndProvider } from './dnd';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <DndContextProvider>\n      <ChessboardProvider> */}\n    <Provider store={store}>\n      <App />\n    </Provider>\n    {/* </ChessboardProvider>\n    </DndContextProvider> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}