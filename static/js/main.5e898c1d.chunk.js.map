{"version":3,"sources":["components/main/Start.js","components/main/Main-screen.js","components/authorization/sign-in.js","components/authorization/Log-in.js","components/authorization/Login-screen.js","App.js","serviceWorker.js","index.js"],"names":["props","className","onClick","startScrenBtnEventFunc","MainScreen","state","gameStart","statysTicPage","console","log","this","Start","test","checkCurrentState","React","Component","id","type","placeholder","toLoginEventFunction","LoginScreen","userAuthorized","toCreateUser","user","a","fetch","method","headers","body","JSON","stringify","request","json","status","setState","localStorage","setItem","userInfo","email","document","getElementById","value","password","userEmail","userPassword","modal","bind","App","auntificated","userIdData","content","getItem","toSignInUser","parse","toCheckUserAuthorization","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5e898c1d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default (props) => {\r\n    return (\r\n        <div className=\"start-screen\">\r\n        <div className=\"wrapper\">\r\n          <div className=\"start-screen__wrapper\">\r\n            <h1 className=\"start-screen__main-title\">English puzzle</h1>\r\n            <p className=\"start-screen__main-description\">Click on the words, collect the phrases\r\n              Words can be drag and drop. Select tooltips in the menu\r\n            </p>\r\n            <button onClick={props.startScrenBtnEventFunc} className=\"start-screen__button\">Start</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport Start from './Start';\r\n\r\nclass MainScreen extends React.Component {\r\n  state = {\r\n    gameStart: false,\r\n    statysTicPage: false\r\n  }\r\n\r\n  test() {\r\n    console.log(this.props);\r\n  }\r\n  //\r\n\r\n  async getUserWords() {\r\n\r\n  }\r\n\r\n  startScrenBtnEventFunc() {\r\n    console.log(true);\r\n  }\r\n\r\n  checkCurrentState() {\r\n    if (this.state.gameStart) {\r\n\r\n    }\r\n    return <Start startScrenBtnEventFunc={this.startScrenBtnEventFunc}/>;\r\n  }\r\n\r\n  render() {\r\n    this.test()\r\n    return (\r\n      <div>\r\n        {this.checkCurrentState()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MainScreen;\r\n","import React from 'react';\r\n\r\nexport default (props) => {\r\n    return (\r\n        <div className=\"login-screen\">\r\n            <div className=\"login-screen__popup\">\r\n                <p className=\"login-screen__title\"><b>Signin</b></p>\r\n                <input id=\"email\" className=\"login-screen__input\" type=\"text\" placeholder=\"\" />\r\n                <input id=\"password\" className=\"login-screen__input\" type=\"text\" placeholder=\"\" />\r\n\r\n                <button className=\"login-screen__button\" onClick={props.toLoginEventFunction}>LOGIN</button>\r\n            </div>\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\n\r\nexport default (props) => {\r\n    return (\r\n        <div className=\"login-screen\">\r\n            <div className=\"login-screen__popup\">\r\n                <p className=\"login-screen__title\"><b>login</b></p>\r\n                <input id=\"email\" className=\"login-screen__input\" type=\"text\" placeholder=\"\" />\r\n                <input id=\"password\" className=\"login-screen__input\" type=\"text\" placeholder=\"\" />\r\n\r\n                <button className=\"login-screen__button\" onClick={props.toLoginEventFunction}>LOGIN</button>\r\n            </div>\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\n\r\nimport SignIn from './sign-in.js';\r\nimport LogIn from './Log-in.js';\r\n\r\nclass LoginScreen extends React.Component {\r\n    state = {\r\n        userAuthorized: false\r\n    }\r\n\r\n    toCreateUser = async user => {\r\n        console.log('Юзер функция сработала');\r\n        const request = await fetch('https://afternoon-falls-25894.herokuapp.com/users', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(user)\r\n        });\r\n        const response = await request.json();\r\n        if (response.status === 200) {\r\n            this.setState({\r\n                userAuthorized: true\r\n            })\r\n            localStorage.setItem('userData', JSON.stringify(user));\r\n        } else {\r\n            \r\n        }\r\n        \r\n        \r\n        console.log(localStorage['userData']);\r\n    };\r\n\r\n    toLoginEventFunction() {\r\n        const userInfo = {\r\n            email: document.getElementById('email').value,\r\n            password: document.getElementById('password').value\r\n        }\r\n        const userEmail = userInfo.email;\r\n        const userPassword = userInfo.password;\r\n        console.log('event');\r\n        if ((/[A-Z]+/g.test(userPassword) && /[0-9]+/g.test(userPassword) && /[a-z]+/g.test(userPassword) && /[+-_@$!%*?&#.,;:[\\]{}]+/g.test(userPassword)) && /^[-._a-z0-9]+@(?:[a-z0-9][-a-z0-9]+\\.)+[a-z]{2,6}$/.test(userEmail)) {\r\n            console.log(true);\r\n            //this.toCreateUser.call(this, userInfo);\r\n            this.toCreateUser(userInfo);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let modal;\r\n        if (this.state.userAuthorized) {\r\n            modal = <SignIn toLoginEventFunction={this.toLoginEventFunction.bind(this)} />;\r\n        } else {\r\n            modal = <LogIn toLoginEventFunction={this.toLoginEventFunction.bind(this)} />;\r\n        }\r\n        return (\r\n            <div>\r\n                {modal}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginScreen;\r\n\r\n\r\n\r\n/*export default props => {\r\n    return (\r\n    <div className=\"login-screen\">\r\n        <div className=\"login-screen__popup\">\r\n        <p className=\"login-screen__title\"><b>login</b></p>\r\n        <input id=\"email\" className=\"login-screen__input\" type=\"text\" placeholder=\"\"/>\r\n        <input id=\"password\" className=\"login-screen__input\" type=\"text\" placeholder=\"\"/>\r\n\r\n        <button className=\"login-screen__button\" onClick={props.toLoginEventFunction}>LOGIN</button>\r\n        </div>\r\n    </div>\r\n    )\r\n}*/\r\n\r\n\r\n/**\r\n *\r\n * const\r\n */","import React from 'react';\n\nimport './css/App.css';\nimport './css/start-screen.css';\nimport './css/login-screen.css';\n\nimport MainScreen from './components/main/Main-screen.js';\nimport LoginScreen from './components/authorization/Login-screen.js';\n\nclass App extends React.Component {\n  state = {\n    auntificated: false\n  }\n\n  userIdData = {};\n\n  async toSignInUser(user) {\n    const request = await fetch('https://afternoon-falls-25894.herokuapp.com/signin', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    });\n    const content = await request.json();\n    if (request.status === 200) {\n      this.userIdData = content;\n      this.setState({\n        auntificated: true\n      })\n    }\n  }\n\n  toCheckUserAuthorization() {\n    if (localStorage.getItem('userData')) {\n      if (this.state.auntificated) {\n        return <MainScreen userIdData={this.userIdData} />;\n      }\n      this.toSignInUser(JSON.parse(localStorage['userData']));\n    } \n    return <LoginScreen />;\n  }\n\n  render() {\n    return (\n      <div>\n        {this.toCheckUserAuthorization()}\n      </div>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}