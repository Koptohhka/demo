{"version":3,"sources":["hoc/Wrapper.js","components/current-question/answers/answer/Answer.js","components/current-question/answers/Answers.js","components/current-question/Current-question.js","components/finish-popup/Finish-popup.js","containers/quiz/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","className","this","props","children","React","Component","Answer","listItemClasses","answerState","push","onClick","toShowAnswer","answerId","join","answer","Answers","answers","map","it","i","id","key","state","CurrentQuestion","question","activeQuestionCounter","questionsLength","FinishPopup","Quiz","quizList","clickFunctionIsEnable","isFinished","resultStatystic","length","Class","setState","console","log","currentState","answerResult","toCheckRightAnswer","toSetAnswerState","timeOut","setTimeout","nextState","isQuizFinished","clearTimeout","bind","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5d8ba2cd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Wrapper.css';\r\n\r\nclass Wrapper extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"Wrapper\">\r\n                <main>\r\n                    {this.props.children}\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Wrapper;","import React from 'react';\r\nimport './Answer.css';\r\n\r\nconst Answer = props => {\r\n    const listItemClasses = ['Question__list-item'];\r\n    if (props.answerState) {\r\n        listItemClasses.push(props.answerState);\r\n    }\r\n    return (\r\n        <li onClick={() => {\r\n            props.toShowAnswer(props.answerId);\r\n        }} \r\n        className={listItemClasses.join(' ')}>{props.answer}</li>\r\n    )\r\n}\r\n\r\nexport default Answer;","import React from 'react';\r\nimport './Answers.css';\r\n\r\nimport Answer from './answer/Answer.js';\r\n\r\nconst Answers = props => {\r\n    return (\r\n        <ul className=\"Answers__list\">\r\n            {props.answers.map((it, i) => {\r\n                return <Answer\r\n                    toShowAnswer={props.toShowAnswer}\r\n                    answerId={it.id}\r\n                    key={i}\r\n                    answer={it.answer}\r\n                    answerState={props.answerState && props.answerState.id === it.id ? props.answerState.state : null} />\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Answers;","import React from 'react';\r\nimport './Current-question.css';\r\n\r\nimport Answers from './answers/Answers.js';\r\n\r\nconst CurrentQuestion = props => {\r\n    return (\r\n        <div className=\"Current-question\">\r\n            <div className=\"Current-question__wrapper\">\r\n                <p className=\"Current-question__question\">\r\n                    <strong>1.1</strong>{props.question.question}\r\n                </p>\r\n                <small>{props.activeQuestionCounter + 1} из {props.questionsLength}</small>\r\n            </div>\r\n            <Answers\r\n                toShowAnswer={props.toShowAnswer}\r\n                answers={props.question.answers}\r\n                answerState={props.answerState}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CurrentQuestion;\r\n\r\n/**\r\n *\r\n *\r\n * const testdata = [\r\n        {question: 'Вопрос 1'},\r\n        {question: 'Вопрос 1'},\r\n        {question: 'Вопрос 1'},\r\n        {question: 'Вопрос 1'},\r\n    ];\r\n */","import React from 'react';\r\n\r\nimport './Finish-popup.css';\r\n\r\nconst FinishPopup = props => {\r\n    return (\r\n        <div className=\"FinishPopup\">\r\n            <h2 className=\"FinishPopup__title\">Finished</h2>\r\n            <ul className=\"FinishPopup__list\">\r\n                <li className=\"FinishPopup__list-item\">Question 1</li>\r\n                <li className=\"FinishPopup__list-item\">Question 2</li>\r\n                <li className=\"FinishPopup__list-item\">Question 3</li>\r\n            </ul>\r\n            <p className=\"FinishPopup__paragraph\"> <strong>Правильно N из n</strong> </p>\r\n            <button className=\"FinishPopup__button\">Повторить</button>\r\n        </div>\r\n    )\r\n}\r\nexport default FinishPopup;","import React from 'react';\r\nimport './Quiz.css';\r\n\r\nimport CurrentQuestion from '../../components/current-question/Current-question.js';\r\nimport FinishPopup from '../../components/finish-popup/Finish-popup.js';\r\n\r\nclass Quiz extends React.Component {\r\n    state = {\r\n        quizList: [\r\n            {\r\n                answers: [\r\n                    { answer: 'Милана PI(door)', id: 0 },\r\n                    { answer: 'Библиотека', id: 1 },\r\n                    { answer: 'акетоилбиБ', id: 2 },\r\n                    { answer: 'фреймоворк', id: 3 },\r\n                ],\r\n                answer: 3,\r\n                question: 'Что такое react?'\r\n            },\r\n            {\r\n                answers: [\r\n                    { answer: 'Ответ 1', id: 0 },\r\n                    { answer: 'Ответ 2', id: 1 },\r\n                    { answer: 'Ответ 3', id: 2 },\r\n                    { answer: 'Ответ 4', id: 3 },\r\n                ],\r\n                answer: 2,\r\n                question: 'Вопрос 2?'\r\n            },\r\n            {\r\n                answers: [\r\n                    { answer: 'Ответ 1', id: 0 },\r\n                    { answer: 'Ответ 2', id: 1 },\r\n                    { answer: 'Ответ 3', id: 2 },\r\n                    { answer: 'Ответ 4', id: 3 },\r\n                ],\r\n                answer: 3,\r\n                question: 'Вопрос 3?'\r\n            }\r\n        ],\r\n        activeQuestionCounter: 0,\r\n        answerState: null,\r\n        clickFunctionIsEnable: true,\r\n        isFinished: false,\r\n        resultStatystic: {}\r\n    }\r\n\r\n    isQuizFinished() {\r\n        return (this.state.activeQuestionCounter + 1) === this.state.quizList.length;\r\n    }\r\n\r\n    toCheckRightAnswer(id) {\r\n        return this.state.quizList[this.state.activeQuestionCounter].answer === id;\r\n    }\r\n\r\n    toSetAnswerState(Class, id) {\r\n        this.setState({\r\n            answerState: {\r\n                state: Class,\r\n                id: id\r\n            }\r\n        })\r\n    }\r\n\r\n    toShowAnswer(id) {\r\n        if (!this.state.clickFunctionIsEnable) {\r\n            return null;\r\n        }\r\n\r\n        console.log('event');\r\n        this.setState({\r\n            clickFunctionIsEnable: false\r\n        })\r\n        const currentState = this.state;\r\n        const answerResult = this.toCheckRightAnswer(id);\r\n\r\n        if (answerResult) {\r\n            this.toSetAnswerState('Question__list-item--true', id);\r\n        } else {\r\n            console.log('wrong');\r\n            this.toSetAnswerState('Question__list-item--error', id);\r\n        }\r\n        const timeOut = setTimeout(() => {\r\n            const nextState = {\r\n                answerState: null,\r\n                clickFunctionIsEnable: true\r\n            }\r\n            if (!this.isQuizFinished()) {\r\n                if (answerResult) {\r\n                    nextState.activeQuestionCounter = currentState.activeQuestionCounter + 1\r\n                }\r\n            } else {\r\n                nextState.isFinished = true;\r\n            }\r\n            this.setState(\r\n                nextState\r\n            )\r\n            clearTimeout(timeOut);\r\n        }, 900);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Quiz\">\r\n                <h1 className=\"Quiz__title\">Test yourself</h1>\r\n                {\r\n                    this.state.isFinished ? <FinishPopup /> :\r\n                    <CurrentQuestion\r\n                        toShowAnswer={this.toShowAnswer.bind(this)}\r\n                        question={this.state.quizList[this.state.activeQuestionCounter]}\r\n                        activeQuestionCounter={this.state.activeQuestionCounter}\r\n                        questionsLength={this.state.quizList.length}\r\n                        answerState={this.state.answerState}\r\n                    />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quiz;","import React from 'react';\nimport './App.css';\n\nimport Wrapper from './hoc/Wrapper.js';\nimport Quiz from './containers/quiz/Quiz.js';\n\nfunction App() {\n  return (\n    <Wrapper>\n      <Quiz />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}