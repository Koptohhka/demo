{"version":3,"sources":["constants/pieces.ts","redux/chessboardReducer.tsx","dnd/utils/getTargetElementUnderLayer.ts","dnd/useDndProvider.tsx","components/Figure/index.ts","components/Figure/Figure.tsx","components/Cell/index.ts","components/Cell/Cell.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["pieces","SET_FUGRES_DATA","initialState","figuresData","setFiguresData","payload","type","chessboardReducer","state","action","getTargetElementUnderLayer","x","y","elementFlag","currentElement","stack","elementStylesChaching","recurFind","document","elementFromPoint","dataset","tagName","length","forEach","it","i","style","display","push","DndProvier","children","useSelector","dispatch","useDispatch","useState","currentTarget","setCurrentTarget","isDraging","setisDraging","startX","startY","currentX","currentY","coordsMap","setCoordsMap","onMouseDown","evt","target","figure","clientX","clientY","onMouseMove","transform","undefined","onMouseUp","cell","content","onTouchStart","preventDefault","changedTouches","onTouchMove","onTouchEnd","Figure","index","size","dragRef","useRef","useEffect","current","id","ref","width","height","background","position","top","left","zIndex","Cell","border","App","fen","console","log","boardArrangement","split","chessboardCoords","j","String","fromCharCode","createChessboardCoordsMap","gridTemplateColumns","className","Object","entries","map","coordItem","key","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0de0936c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst pieces: any = {\r\n    \"wS\": true,\r\n    \"bS\":true,\r\n    \"K\": true,\r\n    \"Q\": true,\r\n    \"R\": true,\r\n    \"B\":true,\r\n    \"N\":true,\r\n    \"P\":true,\r\n    \"k\": true,\r\n    \"q\": true,\r\n    \"r\": true,\r\n    \"b\": true,\r\n    \"n\": true,\r\n    \"p\": true,\r\n}\r\n\r\nexport { pieces };","const SET_FUGRES_DATA = 'chessboardReducer/SET_FUGRES_DATA';\r\n\r\nconst initialState = {\r\n    figuresData: null,\r\n}\r\n\r\nconst chessboardReducer = (state: any = initialState, action: any) => {\r\n    switch(action.type) {\r\n        case SET_FUGRES_DATA:\r\n            return {\r\n                ...state,\r\n                figuresData: action.payload\r\n            } \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst setFiguresData = (payload: any) => ({\r\n    type: SET_FUGRES_DATA,\r\n    payload\r\n})\r\n\r\nexport default chessboardReducer;\r\nexport { setFiguresData };","export const getTargetElementUnderLayer = (x: any, y: any, elementFlag: any) => {\r\n    let currentElement: any = null;\r\n\r\n    const stack: any = [];\r\n    const elementStylesChaching: any = [];\r\n\r\n    const recurFind = (): any => {\r\n        currentElement = document.elementFromPoint(x, y);\r\n\r\n        if (currentElement) {\r\n            if (currentElement.dataset[elementFlag] || currentElement.tagName === 'HTML') {\r\n                if (stack.length !== 0) {\r\n                    stack.forEach((it: any, i: number) => it.style.display = elementStylesChaching[i])\r\n                }\r\n                return currentElement;\r\n            } else {\r\n                elementStylesChaching.push(currentElement.style.display);\r\n                currentElement.style.display = 'none';\r\n                stack.push(currentElement);\r\n                return recurFind();\r\n            }\r\n        }\r\n    }\r\n\r\n    return recurFind();\r\n}","import React, { useContext, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { chessboardContext } from '../context/chessboardContext';\r\nimport { DndContextProvider, dndContext } from './dndContext';\r\n\r\nimport { setFiguresData } from '../redux/chessboardReducer';\r\nimport { getTargetElementUnderLayer } from '../dnd/utils/getTargetElementUnderLayer';\r\n\r\nconst DndProvier = ({ children }: any) => {\r\n    const { figuresData } = useSelector((state: any) => state.chessboardReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    const [currentTarget, setCurrentTarget]: any = useState(null);\r\n    const [isDraging, setisDraging] = useState(false);\r\n    const [coordsMap, setCoordsMap]: any = useState({\r\n        startX: null,\r\n        startY: null,\r\n        currentX: null,\r\n        currentY: null\r\n    });\r\n\r\n\r\n    return (\r\n        <div\r\n            onMouseDown={(evt: any) => {\r\n                if (figuresData[evt.target.dataset.figure]) {\r\n                    const { clientX, clientY } = evt;\r\n                    setisDraging(true);\r\n                    setCurrentTarget(evt.target);\r\n\r\n                    setCoordsMap({\r\n                        ...coordsMap,\r\n                        startX: clientX,\r\n                        startY: clientY\r\n                    });\r\n\r\n                }\r\n            }}\r\n\r\n            onMouseMove={isDraging ? (evt: any) => {\r\n                const { clientX, clientY } = evt;\r\n                // console.log(coordsMap)\r\n\r\n\r\n                currentTarget.style.transform = `translate(${clientX - coordsMap.startX}px, ${clientY - coordsMap.startY}px)`\r\n            } : undefined}\r\n\r\n            onMouseUp={isDraging ? (evt: any) => {\r\n                const { clientX, clientY } = evt;\r\n                setisDraging(false);\r\n\r\n                const cell = getTargetElementUnderLayer(clientX, clientY, 'cell');\r\n\r\n                dispatch(setFiguresData({\r\n                    ...figuresData,\r\n                    [currentTarget.dataset.figure]: null,\r\n                    [cell.dataset.cell]: {\r\n                        content: currentTarget.dataset.figure\r\n                    }\r\n                }));\r\n\r\n\r\n            } : undefined}\r\n\r\n\r\n\r\n            /////// TOUCH_EVENTS\r\n            onTouchStart={(evt: any) => {\r\n                evt.preventDefault();\r\n                const { target, changedTouches } = evt;\r\n                if (figuresData[target.dataset.figure]) {\r\n                    const { clientX, clientY } = changedTouches[0];\r\n                    setisDraging(true);\r\n                    setCurrentTarget(target);\r\n\r\n                    setCoordsMap({\r\n                        ...coordsMap,\r\n                        startX: clientX,\r\n                        startY: clientY\r\n                    });\r\n                }\r\n            }}\r\n\r\n            onTouchMove={isDraging ? (evt: any) => {\r\n                evt.preventDefault();\r\n                // console.log(evt.changedTouches);\r\n                // console.log(evt.changedTouches[0].clientX);\r\n                // console.log(evt.changedTouches[0].clientY);\r\n                const { clientY, clientX } = evt.changedTouches[0];\r\n\r\n                currentTarget.style.transform = `translate(${clientX - coordsMap.startX}px, ${clientY - coordsMap.startY}px)`\r\n            } : undefined}\r\n\r\n            onTouchEnd={isDraging ? (evt: any) => {\r\n                evt.preventDefault();\r\n                const { clientY, clientX } = evt.changedTouches[0];\r\n                setisDraging(false);\r\n\r\n                const cell = getTargetElementUnderLayer(clientX, clientY, 'cell');\r\n\r\n                dispatch(setFiguresData({\r\n                    ...figuresData,\r\n                    [currentTarget.dataset.figure]: null,\r\n                    [cell.dataset.cell]: {\r\n                        content: currentTarget.dataset.figure\r\n                    }\r\n                }));\r\n            } : undefined}\r\n\r\n        >\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { DndProvier };","import Figure from './Figure';\r\nexport default Figure;","import React, { useState, useCallback, useContext, useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { chessboardContext } from '../../context/chessboardContext';\r\nimport { useDrag } from '../../dnd/useDrag';\r\nimport { getTargetElementUnderLayer } from '../../dnd/utils/getTargetElementUnderLayer';\r\nimport { dndContext } from '../../dnd/dndContext';\r\n\r\nimport { setFiguresData } from '../../redux/chessboardReducer';\r\n\r\nconst Figure = ({ index, size, children }: any) => {\r\n    // const { figuresData, setFiguresData, setTest, test } = useContext(chessboardContext);\r\n    // const { actions, state } = useContext(dndContext);\r\n    const { figuresData } = useSelector((state: any) => state.chessboardReducer);\r\n    const dispatch = useDispatch();\r\n\r\n    const dragRef: any = useRef(null);\r\n    \r\n    let startCoords: any = {\r\n        X: null,\r\n        Y: null,\r\n        targetIndex: null\r\n    }\r\n\r\n    const dragStart = (evt: any) => {\r\n        startCoords = {\r\n            X: evt.clientX,\r\n            Y: evt.clientY,\r\n            targetIndex: evt.target.dataset.figure\r\n        }\r\n    }\r\n\r\n    const onDragEnd = (evt: any) => {\r\n        // todo сделай проверку на трушность в теле самой функции getTargetElementUnderLayer\r\n        const { clientX, clientY } = evt;\r\n        const cell = getTargetElementUnderLayer(clientX, clientY, 'cell');\r\n        if (cell.dataset.cell) {\r\n            const cellIndex = cell.dataset.cell\r\n\r\n            const newData = {\r\n                ...figuresData\r\n            }\r\n\r\n            newData[cellIndex] = {\r\n                content: newData[startCoords.targetIndex].content\r\n            }\r\n            newData[startCoords.targetIndex] = null;\r\n            \r\n            console.log({olddata: figuresData})\r\n            console.log({newData})\r\n\r\n            dispatch(setFiguresData(newData));\r\n        }\r\n    }\r\n\r\n    // const { dragRef } = useDrag({ dragStart, onDragEnd });\r\n\r\n    useEffect(() => {\r\n        if (dragRef) {\r\n            const newValue: any = {\r\n                // ...state.draggbleElements\r\n            }\r\n\r\n            newValue[dragRef.current.id] = true;\r\n\r\n            // actions.setDraggbleElements(newValue);\r\n\r\n            // console.log(newValue)\r\n            // dndHandlers.mousedownHandler = dndHandlers.mousedownHandler.bind(this, dragStart)\r\n            // dragRef.current.addEventListener('mousedown', dndHandlers.mousedownHandler);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div\r\n        ref={dragRef}\r\n        {...{ 'data-figure': `${index}` }}\r\n        id={`figure-${index}`}\r\n        style={{\r\n            width: size,\r\n            height: size,\r\n            background: 'red',\r\n            position: 'absolute',\r\n            top: '10%',\r\n            left: '10%',\r\n            zIndex: 2\r\n            // transform: `translate(${X}px, ${Y}px)`\r\n        }}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Figure;","import Cell from './Cell';\r\nexport default Cell;","import React, { useState } from 'react';\r\n\r\ninterface Props {\r\n    size: number | string;\r\n    onMouseDown: any;\r\n    Figure?: any;\r\n}\r\n\r\nconst Cell = ({ size, index, children }: any) => {\r\n\r\n    return(\r\n        <div\r\n        {...{ 'data-cell': `${index}` }}\r\n        style={{\r\n            width: size,\r\n            height: size,\r\n            border: '1px solid red',\r\n            background: 'black',\r\n            position: 'relative'\r\n        }}\r\n        >\r\n           {children} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cell;","import React, { useCallback, useState, useContext, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport './App.scss';\r\nimport { pieces } from './constants/pieces';\r\nimport { ChessboardProvider, chessboardContext } from './context/chessboardContext';\r\nimport { DndProvier } from './dnd/useDndProvider';\r\n\r\nimport Figure from './components/Figure';\r\nimport Cell from './components/Cell';\r\nimport Row from './components/Row';\r\n\r\nimport { setFiguresData } from './redux/chessboardReducer';\r\n\r\ninterface Props {\r\n  size?: number;\r\n  fen?: string;\r\n}\r\n\r\nconst DEFAULT_FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\r\nconst DEFAULT_BOARD_SIZE = 440;\r\n\r\nconst App = ({ size = DEFAULT_BOARD_SIZE, fen = DEFAULT_FEN }: any) => {\r\n  const { figuresData } = useSelector((state: any) => state.chessboardReducer);\r\n  const dispatch = useDispatch();\r\n\r\n  const createChessboardCoordsMap = () => {\r\n    const splitedFenString = fen.split(' ');\r\n    const boardArrangement = splitedFenString[0].split('/');\r\n\r\n    const chessboardCoords: any = {};\r\n\r\n    for (let i = 0; i < 8; i += 1) {\r\n\r\n      for (let j = 0; j < 8; j += 1) {\r\n        if (pieces[boardArrangement[i][j]]) {\r\n          chessboardCoords[`${String.fromCharCode(65 + i)}${j + 1}`] = {\r\n            content: `${String.fromCharCode(65 + i)}${j + 1}`\r\n          };\r\n        } else {\r\n          chessboardCoords[`${String.fromCharCode(65 + i)}${j + 1}`] = null;\r\n        }\r\n      }\r\n\r\n    }\r\n    return chessboardCoords;\r\n  }\r\n\r\n  const renderBoard = () => {\r\n    const chessCoords = Object.entries(figuresData);\r\n\r\n    return chessCoords.map((coordItem) => {\r\n      const [key, value]: any = coordItem;\r\n      return (\r\n        <Cell index={key}>\r\n          {value ? (\r\n            <Figure index={key} size={size / 14}>{value.content}</Figure>\r\n          ) : undefined}\r\n        </Cell>\r\n      )\r\n    });;\r\n  }\r\n\r\n  useEffect(() => {\r\n    console.log('сработало блядь');\r\n    if (!figuresData) dispatch(setFiguresData(createChessboardCoordsMap()));\r\n  }, []);\r\n\r\n  // console.log(figuresData)\r\n\r\n  return (\r\n    <DndProvier>\r\n      <div style={{\r\n        width: size,\r\n        height: size,\r\n        border: '1px solid black',\r\n        display: 'grid',\r\n        gridTemplateColumns: `${size / 8}px ${size / 8}px ${size / 8}px ${size / 8}px ${size / 8}px ${size / 8}px ${size / 8}px ${size / 8}px`\r\n      }}\r\n        className=\"Chessboard\">\r\n        {figuresData ? renderBoard() : null}\r\n      </div>\r\n      {/* <button style={{ width: 100, height: 100 }} onClick={() => {\r\n        //\r\n        dispatch(setTestNum(state.testNum + 1));\r\n        //\r\n        console.log(state)\r\n      }}></button> */}\r\n    </DndProvier>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { combineReducers, createStore } from 'redux';\r\nimport chessboardReducer from './chessboardReducer';\r\n\r\nconst rootReducer: any = combineReducers({\r\n    chessboardReducer\r\n});\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport { store };\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\n\nimport { store } from './redux/store';\nimport { ChessboardProvider } from './context/chessboardContext';\nimport { DndContextProvider } from './dnd/dndContext';\n// import { DndProvider } from './dnd';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <DndContextProvider>\n      <ChessboardProvider> */}\n    <Provider store={store}>\n      <App />\n    </Provider>\n    {/* </ChessboardProvider>\n    </DndContextProvider> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}